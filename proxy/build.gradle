plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'br.com.devcave.workshop.kubernetes'

sourceCompatibility = 1.11
targetCompatibility = 1.11

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', 'Greenwich.RELEASE')
	set('swaggerVersion', '2.9.2')
	set('mapstructVersion', '1.2.0.Final')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
	implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"

	compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
	compile "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task patchVersion {
	doLast{
		Properties props = new Properties()
		File propsFile = new File('gradle.properties')
		props.load(propsFile.newDataInputStream())
		def stable_project_version = props.getProperty('version') as String
		def (major, minor, patch) = stable_project_version.tokenize('.')
		if ("patch" == typeVersion) {
			patch = patch.toInteger() + 1
		} else if ("minor" == typeVersion) {
			patch = 0
			minor = minor.toInteger() + 1
		} else if ("major" == typeVersion) {
			patch = 0
			minor = 0
			major = major.toInteger() + 1
		} else {
			final String msg = "Invalid 'typeVersion'. typeVersion=" typeVersion + " and must be patch, minor or major"

			println msg

			throw new IllegalArgumentException(msg)
		}
		String snapshot_project_version = major + '.' + minor + '.' + patch
		props.setProperty('version', snapshot_project_version)
		props.store(propsFile.newWriter(), null)
	}
}

task replaceVersion {
	doLast{
		def file = new File('k8s/proxy-jenkins.yaml')
		def newConfig = file.text.replaceAll("image: (.*)proxy(.*)", 'image: $1proxy:' + projectVersion)
		file.text = newConfig
	}
}
